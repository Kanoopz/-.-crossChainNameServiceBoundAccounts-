// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)

pragma solidity ^0.8.20;

import {ERC721} from '@openzeppelin/contracts/token/ERC721/ERC721.sol';
import {IERC6551Registry} from './erc6551/interfaces/IERC6551Registry.sol';

contract customErc721 is ERC721
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //      "STORAGE"                                                                                                                                        ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////
    //      "VARIABLES"                                        ///
    //////////////////////////////////////////////////////////////
    address public resolverPointingAddress;
    string public nameServiceString;

    //////////////////////////////////////////////////////////////
    //      "interfaceVariables"                               ///
    //////////////////////////////////////////////////////////////
    IERC6551Registry registryInterfaceInstance;



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //      "FUNCTIONS"                                                                                                                                      ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////
    //      "CONSTRUCTOR"                                      ///
    //////////////////////////////////////////////////////////////
    constructor(string memory name, string memory symbol, address paramResolverPointingAddress, string memory paramNameServiceString, address paramErc6551RegistryAddress) ERC721(name, symbol)
    {
        resolverPointingAddress = paramResolverPointingAddress;
        nameServiceString = paramNameServiceString;

        registryInterfaceInstance = IERC6551Registry(paramErc6551RegistryAddress);

        _safeMint(paramResolverPointingAddress, 0);
    }

    //////////////////////////////////////////////////////////////
    //      "otherFunctions"                                   ///
    //////////////////////////////////////////////////////////////
    function transferFrom(address from, address to, uint256 tokenId) public override 
    {
        if (to == address(0)) 
        {
            revert ERC721InvalidReceiver(address(0));
        }
        // Setting an "auth" arguments enables the `_isAuthorized` check which verifies that the token exists
        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.
        address previousOwner = _update(to, tokenId, _msgSender());

        if (previousOwner != from) 
        {
            revert ERC721IncorrectOwner(from, tokenId, previousOwner);
        }


        resolverPointingAddress = to;
    }

    function getContratAddress() public view returns(address)
    {
        return address(this);
    }
}